this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};(function(e,t,a,s,i,r){"use strict";const n={name:"TaskChatOpener",components:{BaseChatContent:i.BaseChatContent,ChatTextarea:r.ChatTextarea},props:{chatId:{type:Number,required:true}},computed:{dialog(){return this.$store.getters["chats/getByChatId"](this.chatId,true)},dialogId(){return this.dialog.dialogId}},created(){void this.onChatOpen()},methods:{async onChatOpen(){if(this.dialog.inited){a.Logger.warn(`TaskChatOpener: chat ${this.chatId} is already loaded`);return}await this.loadChat()},async loadChat(){a.Logger.warn(`TaskChatOpener: loading chat ${this.chatId}`);await this.getChatService().loadChatByChatId(this.chatId);a.Logger.warn(`TaskChatOpener: chat ${this.chatId} is loaded`)},getChatService(){if(!this.chatService){this.chatService=new s.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-messenger__scope bx-im-task-chat-opener__container">\n\t\t\t<div v-if="!dialog.inited">...</div>\n\t\t\t<BaseChatContent v-else :dialogId="dialogId" :withHeader="false" :withSidebar="false">\n\t\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t\t<ChatTextarea\n\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t:key="dialogId"\n\t\t\t\t\t\t:withMarket="false"\n\t\t\t\t\t\t:withAudioInput="false"\n\t\t\t\t\t\t@mounted="onTextareaMount"\n\t\t\t\t\t/>\n\t\t\t\t</template>\n\t\t\t</BaseChatContent>\n\t\t</div>\n\t`};const o="TaskChatApplication";var h=babelHelpers.classPrivateFieldLooseKey("initPromise");var l=babelHelpers.classPrivateFieldLooseKey("config");var d=babelHelpers.classPrivateFieldLooseKey("init");class c{constructor(e={}){Object.defineProperty(this,d,{value:p});Object.defineProperty(this,h,{writable:true,value:void 0});Object.defineProperty(this,l,{writable:true,value:void 0});babelHelpers.classPrivateFieldLooseBase(this,l)[l]=e;babelHelpers.classPrivateFieldLooseBase(this,h)[h]=babelHelpers.classPrivateFieldLooseBase(this,d)[d]()}ready(){return babelHelpers.classPrivateFieldLooseBase(this,h)[h]}async render(e){await this.ready();const a=babelHelpers.classPrivateFieldLooseBase(this,l)[l];return t.Core.createVue(this,{name:o,el:e,components:{TaskChatOpener:n},data(){return{config:a}},template:`<TaskChatOpener :chatId="${babelHelpers.classPrivateFieldLooseBase(this,l)[l].chatId}" :config="config" />`})}}async function p(){await t.Core.ready();return this}e.TaskApplication=c})(this.BX.Messenger.v2.Application=this.BX.Messenger.v2.Application||{},BX.Messenger.v2.Application,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Component);
//# sourceMappingURL=task.bundle.map.js