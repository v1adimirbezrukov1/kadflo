this.BX=this.BX||{};this.BX.Messenger=this.BX.Messenger||{};this.BX.Messenger.v2=this.BX.Messenger.v2||{};this.BX.Messenger.v2.Component=this.BX.Messenger.v2.Component||{};(function(t,e,n,i,a,s,r,o,d,l,c,h,g,u,p,m,v,C,_,T,b,E,I,B){"use strict";const S={name:"CallHeaderButton",props:{dialogId:{type:String,required:true},compactMode:{type:Boolean,default:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},componentToRender(){return n.CallButton}},template:`\n\t\t<component v-if="componentToRender" :is="componentToRender" :dialog="dialog" :compactMode="compactMode" />\n\t`};const A={[_.ChatEntityLinkType.tasks]:{className:"--task",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_TASK")},[_.ChatEntityLinkType.calendar]:{className:"--calendar",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MEETING_MSGVER_1")},[_.ChatEntityLinkType.sonetGroup]:{className:"--group",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_GROUP_MSGVER_1")},[_.ChatEntityLinkType.mail]:{className:"--mail",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_MAIL_MSGVER_1")},[_.ChatEntityLinkType.contact]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_CONTACT")},[_.ChatEntityLinkType.deal]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DEAL")},[_.ChatEntityLinkType.lead]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_LEAD")},[_.ChatEntityLinkType.dynamic]:{className:"--crm",loc:p.Loc.getMessage("IM_CONTENT_CHAT_HEADER_OPEN_DYNAMIC_ELEMENT")}};const f={name:"EntityLink",props:{dialogId:{type:String,required:true}},data(){return{}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},entityType(){return this.dialog.entityLink.type},entityUrl(){return this.dialog.entityLink.url},containerClassName(){var t,e;return(t=(e=A[this.entityType])==null?void 0:e.className)!=null?t:""},linkText(){var t,e;return(t=(e=A[this.entityType])==null?void 0:e.loc)!=null?t:"Open entity"}},template:`\n\t\t<a :href="entityUrl" class="bx-im-chat-header-entity-link__container" :class="containerClassName" target="_blank">\n\t\t\t<div class="bx-im-chat-header-entity-link__icon"></div>\n\t\t\t<div class="bx-im-chat-header-entity-link__text --ellipsis">{{ linkText }}</div>\n\t\t\t<div class="bx-im-chat-header-entity-link__arrow"></div>\n\t\t</a>\n\t`};const M={[_.ChatType.openChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[_.ChatType.channel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",[_.ChatType.generalChannel]:"IM_CONTENT_CHAT_HEADER_CHANNEL_USER_COUNT",default:"IM_CONTENT_CHAT_HEADER_USER_COUNT"};const y={name:"GroupChatTitle",components:{EditableChatTitle:b.EditableChatTitle,EntityLink:f,LineLoader:b.LineLoader,FadeAnimation:i.FadeAnimation},inject:["withSidebar"],props:{dialogId:{type:String,required:true}},emits:["membersClick","newTitle"],computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasEntityLink(){var t;return Boolean((t=this.dialog.entityLink)==null?void 0:t.url)},userCounterPhraseCode(){var t;return(t=M[this.dialog.type])!=null?t:M.default},userCounterText(){return p.Loc.getMessagePlural(this.userCounterPhraseCode,this.dialog.userCounter,{"#COUNT#":this.dialog.userCounter})},needShowSubtitleCursor(){return this.withSidebar},sidebarTooltipText(){return this.withSidebar?this.loc("IM_CONTENT_CHAT_HEADER_OPEN_MEMBERS"):""}},methods:{onMembersClick(){if(!this.withSidebar){return}this.$emit("membersClick")},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<EditableChatTitle :dialogId="dialogId" @newTitleSubmit="$emit('newTitle', $event)" />\n\t\t\t<LineLoader v-if="!dialog.inited" :width="50" :height="16" />\n\t\t\t<FadeAnimation :duration="100">\n\t\t\t\t<div v-if="dialog.inited" class="bx-im-chat-header__subtitle_container">\n\t\t\t\t\t<div\n\t\t\t\t\t\t:title="sidebarTooltipText"\n\t\t\t\t\t\t@click="onMembersClick"\n\t\t\t\t\t\tclass="bx-im-chat-header__subtitle_content"\n\t\t\t\t\t\t:class="{'--click': needShowSubtitleCursor}"\n\t\t\t\t\t>\n\t\t\t\t\t\t{{ userCounterText }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<EntityLink v-if="hasEntityLink" :dialogId="dialogId" />\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const L=60*1e3;const x={name:"UserTitle",components:{ChatTitle:b.ChatTitle},props:{dialogId:{type:String,required:true}},data(){return{userLastOnlineText:""}},computed:{userPosition(){return this.$store.getters["users/getPosition"](this.dialogId)},userLastOnline(){return this.$store.getters["users/getLastOnline"](this.dialogId)},userLink(){return a.Utils.user.getProfileLink(this.dialogId)}},watch:{userLastOnline(t){this.userLastOnlineText=t}},created(){this.updateUserOnline();this.userLastOnlineInterval=setInterval(this.updateUserOnline,L)},beforeUnmount(){clearInterval(this.userLastOnlineInterval)},methods:{updateUserOnline(){this.userLastOnlineText=this.$store.getters["users/getLastOnline"](this.dialogId)}},template:`\n\t\t<div class="bx-im-chat-header__info">\n\t\t\t<div class="bx-im-chat-header__title --user">\n\t\t\t\t<a :href="userLink" target="_blank" class="bx-im-chat-header__title_container">\n\t\t\t\t\t<ChatTitle :dialogId="dialogId" />\n\t\t\t\t</a>\n\t\t\t\t<span class="bx-im-chat-header__user-status">{{ userLastOnlineText }}</span>\n\t\t\t</div>\n\t\t\t<div class="bx-im-chat-header__subtitle_container">\n\t\t\t\t<div class="bx-im-chat-header__subtitle_content">{{ userPosition }}</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const N={name:"HeaderAvatar",components:{ChatAvatar:b.ChatAvatar},props:{dialogId:{type:String,required:true}},emits:["avatarClick"],computed:{AvatarSize:()=>b.AvatarSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isUser(){return this.dialog.type===_.ChatType.user},canChangeAvatar(){return T.PermissionManager.getInstance().canPerformActionByRole(_.ActionByRole.avatar,this.dialogId)},isNotes(){return Number.parseInt(this.dialogId,10)===C.Core.getUserId()},userLink(){return a.Utils.user.getProfileLink(this.dialogId)},avatarType(){return this.isNotes?b.ChatAvatarType.notes:""},needProfileLink(){return this.isUser&&!this.isNotes}},methods:{onAvatarClick(){if(this.isUser||!this.canChangeAvatar){return}this.$refs.avatarInput.click()},async onAvatarSelect(t){const e=t.target;const n=e.files[0];if(!n){return}const i=await this.getChatService().prepareAvatar(n);if(!i){return}void this.getChatService().changeAvatar(this.dialog.chatId,i)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService}},template:`\n\t\t<div class="bx-im-chat-header__avatar" :class="{'--can-change': canChangeAvatar}" @click="onAvatarClick">\n\t\t\t<a v-if="needProfileLink" :href="userLink" target="_blank">\n\t\t\t\t<ChatAvatar\n\t\t\t\t\t:avatarDialogId="dialogId"\n\t\t\t\t\t:contextDialogId="dialogId"\n\t\t\t\t\t:size="AvatarSize.L"\n\t\t\t\t/>\n\t\t\t</a>\n\t\t\t<ChatAvatar v-else :avatarDialogId="dialogId" :contextDialogId="dialogId" :size="AvatarSize.L" :customType="avatarType" />\n\t\t</div>\n\t\t<input\n\t\t\ttype="file"\n\t\t\taccept="image/*"\n\t\t\tclass="bx-im-chat-header__avatar_input"\n\t\t\tref="avatarInput"\n\t\t\t@change="onAvatarSelect"\n\t\t>\n\t`};const k={name:"AddToChatButton",components:{AddToChat:E.AddToChat},props:{dialogId:{type:String,default:""}},data(){return{showInviteButton:false,showAddToChatPopup:false}},methods:{openAddToChatPopup(){s.Analytics.getInstance().userAdd.onChatHeaderClick(this.dialogId);this.showAddToChatPopup=true},closeAddToChatPopup(){this.showAddToChatPopup=false},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_INVITE_POPUP_TITLE')"\n\t\t\t:class="{'--active': showAddToChatPopup}"\n\t\t\tclass="bx-im-chat-header__icon --add-people"\n\t\t\t@click="openAddToChatPopup"\n\t\t\tref="add-members"\n\t\t></div>\n\t\t<AddToChat\n\t\t\tv-if="showAddToChatPopup"\n\t\t\t:bindElement="$refs['add-members'] ?? {}"\n\t\t\t:dialogId="dialogId"\n\t\t\t:popupConfig="{ offsetTop: 15, offsetLeft: -300 }"\n\t\t\t@close="closeAddToChatPopup"\n\t\t/>\n\t`};const O={name:"SearchButton",inject:["currentSidebarPanel"],props:{dialogId:{type:String,default:""}},computed:{isMessageSearchActive(){return this.currentSidebarPanel===_.SidebarDetailBlock.messageSearch}},methods:{toggleSearchPanel(){if(this.isMessageSearchActive){m.EventEmitter.emit(_.EventType.sidebar.close,{panel:_.SidebarDetailBlock.messageSearch});return}m.EventEmitter.emit(_.EventType.sidebar.open,{panel:_.SidebarDetailBlock.messageSearch,dialogId:this.dialogId})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SEARCH')"\n\t\t\t:class="{'--active': isMessageSearchActive}"\n\t\t\tclass="bx-im-chat-header__icon --search"\n\t\t\t@click="toggleSearchPanel"\n\t\t></div>\n\t`};const w={name:"SidebarButton",inject:["currentSidebarPanel"],props:{dialogId:{type:String,default:""}},computed:{isSidebarOpened(){return p.Type.isStringFilled(this.currentSidebarPanel)}},methods:{toggleRightPanel(){if(this.isSidebarOpened){m.EventEmitter.emit(_.EventType.sidebar.close,{panel:""});return}m.EventEmitter.emit(_.EventType.sidebar.open,{panel:_.SidebarDetailBlock.main,dialogId:this.dialogId})},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div\n\t\t\tclass="bx-im-chat-header__icon --panel"\n\t\t\t:title="loc('IM_CONTENT_CHAT_HEADER_OPEN_SIDEBAR')"\n\t\t\t:class="{'--active': isSidebarOpened}"\n\t\t\t@click="toggleRightPanel"\n\t\t></div>\n\t`};const P=700;const D={name:"ChatHeader",components:{ChatAvatar:b.ChatAvatar,CallHeaderButton:S,GroupChatTitle:y,UserChatTitle:x,LineLoader:b.LineLoader,FadeAnimation:i.FadeAnimation,HeaderAvatar:N,AddToChatButton:k,SearchButton:O,SidebarButton:w},inject:["currentSidebarPanel","withSidebar"],props:{dialogId:{type:String,default:""},withCallButton:{type:Boolean,default:true},withSearchButton:{type:Boolean,default:true},withAddToChatButton:{type:Boolean,default:true}},emits:["buttonPanelReady","compactModeChange"],data(){return{compactMode:false}},computed:{user(){return this.$store.getters["users/get"](this.dialogId,true)},dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isInited(){return this.dialog.inited},isUser(){return this.dialog.type===_.ChatType.user},isBot(){if(!this.isUser){return false}return this.user.type===_.UserType.bot},showCallButton(){if(this.isBot||!this.withCallButton){return false}return T.PermissionManager.getInstance().canPerformActionByRole(_.ActionByRole.call,this.dialogId)},showAddToChatButton(){if(this.isBot||!this.withAddToChatButton){return false}const t=T.PermissionManager.getInstance().canPerformActionByUserType(_.ActionByUserType.createChat);if(this.isUser&&!t){return false}return T.PermissionManager.getInstance().canPerformActionByRole(_.ActionByRole.extend,this.dialogId)},showSearchButton(){return this.withSearchButton},showSidebarButton(){if(!this.withSidebar){return false}return T.PermissionManager.getInstance().canPerformActionByRole(_.ActionByRole.openSidebar,this.dialogId)},isMembersPanelActive(){return this.currentSidebarPanel===_.SidebarDetailBlock.members},chatTitleComponent(){return this.isUser?x:y},containerClasses(){return{"--compact":this.compactMode}}},mounted(){this.initResizeObserver()},beforeUnmount(){this.getResizeObserver().disconnect()},methods:{initResizeObserver(){this.resizeObserver=new ResizeObserver((([t])=>{this.onContainerResize(t.contentRect.width)}));this.resizeObserver.observe(this.$refs.container)},onContainerResize(t){const e=t<=P;if(e!==this.compactMode){this.$emit("compactModeChange",e);this.compactMode=e}},onMembersClick(){if(!this.isInited){return}if(this.isMembersPanelActive){m.EventEmitter.emit(_.EventType.sidebar.close,{panel:_.SidebarDetailBlock.members});return}m.EventEmitter.emit(_.EventType.sidebar.open,{panel:_.SidebarDetailBlock.members,dialogId:this.dialogId})},onNewTitleSubmit(t){this.getChatService().renameChat(this.dialogId,t).catch((()=>{BX.UI.Notification.Center.notify({content:this.loc("IM_CONTENT_CHAT_HEADER_RENAME_ERROR")})}))},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},getResizeObserver(){return this.resizeObserver},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-chat-header__scope bx-im-chat-header__container" :class="containerClasses" ref="container">\n\t\t\t<div class="bx-im-chat-header__left">\n\t\t\t\t<slot name="left">\n\t\t\t\t\t<HeaderAvatar :dialogId="dialogId" />\n\t\t\t\t\t<slot name="title" :onNewTitleHandler="onNewTitleSubmit">\n\t\t\t\t\t\t<component\n\t\t\t\t\t\t\t:is="chatTitleComponent"\n\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t@membersClick="onMembersClick"\n\t\t\t\t\t\t\t@newTitle="onNewTitleSubmit"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</slot>\n\t\t\t\t</slot>\n\t\t\t</div>\n\t\t\t<LineLoader v-if="!isInited" :width="45" :height="22" />\n\t\t\t<FadeAnimation @afterEnter="$emit('buttonPanelReady')" :duration="100">\n\t\t\t\t<div v-if="isInited" class="bx-im-chat-header__right">\n\t\t\t\t\t<slot name="before-actions"></slot>\n\t\t\t\t\t<CallHeaderButton v-if="showCallButton" :dialogId="dialogId" :compactMode="compactMode" />\n\t\t\t\t\t<slot v-if="showAddToChatButton" name="add-to-chat-button">\n\t\t\t\t\t\t<AddToChatButton :dialogId="dialogId" />\n\t\t\t\t\t</slot>\n\t\t\t\t\t<SearchButton v-if="showSearchButton" :dialogId="dialogId" />\n\t\t\t\t\t<SidebarButton v-if="showSidebarButton" :dialogId="dialogId" />\n\t\t\t\t</div>\n\t\t\t</FadeAnimation>\n\t\t</div>\n\t`};const R={chatHeader:64,pinnedMessages:53,blockedTextarea:64,dropAreaOffset:16};const H={props:{dialogId:{type:String,required:true},container:{type:Object,required:true}},data(){return{showDropArea:false,lastDropAreaEnterTarget:null}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},hasPinnedMessages(){return this.$store.getters["messages/pin/getPinned"](this.dialog.chatId).length>0},dropAreaStyles(){let t=R.dropAreaOffset+R.chatHeader;if(this.hasPinnedMessages){t+=R.pinnedMessages}return{top:`${t}px`}}},watch:{container:{immediate:true,handler(t){if(!p.Type.isElementNode(t)){return}this.bindEvents()}}},beforeUnmount(){this.unbindEvents()},methods:{bindEvents(){p.Event.bind(this.container,"dragenter",this.onDragEnter);p.Event.bind(this.container,"dragleave",this.onDragLeave);p.Event.bind(this.container,"dragover",this.onDragOver);p.Event.bind(this.container,"drop",this.onDrop)},unbindEvents(){p.Event.unbind(this.container,"dragenter",this.onDragEnter);p.Event.unbind(this.container,"dragleave",this.onDragLeave);p.Event.unbind(this.container,"dragover",this.onDragOver);p.Event.unbind(this.container,"drop",this.onDrop)},async onDragEnter(t){t.stopPropagation();t.preventDefault();const e=await u.hasDataTransferOnlyFiles(t.dataTransfer,false);if(!e){return}this.lastDropAreaEnterTarget=t.target;this.showDropArea=true},onDragLeave(t){t.stopPropagation();t.preventDefault();if(this.lastDropAreaEnterTarget!==t.target){return}this.showDropArea=false},onDragOver(t){t.preventDefault()},async onDrop(t){t.preventDefault();const e=await this.getUploadingService().uploadFromDragAndDrop({event:t,dialogId:this.dialogId,sendAsFile:false});if(p.Type.isStringFilled(e)){m.EventEmitter.emit(_.EventType.textarea.openUploadPreview,{uploaderId:e})}this.showDropArea=false},getUploadingService(){if(!this.uploadingService){this.uploadingService=B.UploadingService.getInstance()}return this.uploadingService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<Transition name="drop-area-fade">\n\t\t\t<div v-if="showDropArea" :style="dropAreaStyles" class="bx-im-content-chat-drop-area__container bx-im-content-chat-drop-area__scope">\n\t\t\t\t<div class="bx-im-content-chat-drop-area__box">\n\t\t\t\t\t<span class="bx-im-content-chat-drop-area__icon"></span>\n\t\t\t\t\t<label class="bx-im-content-chat-drop-area__label-text">\n\t\t\t\t\t\t{{ loc('IM_CONTENT_DROP_AREA') }}\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Transition>\n\t`};const U="rgba(0, 0, 0, 0.1)";const z="rgba(0, 0, 0, 0.2)";const $="#fff";const X={components:{ChatButton:b.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>b.ButtonSize,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},isMuted(){return this.dialog.muteList.includes(C.Core.getUserId())},buttonText(){const t=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_ENABLE_NOTIFICATIONS");const e=this.loc("IM_CONTENT_BLOCKED_TEXTAREA_DISABLE_NOTIFICATIONS");return this.isMuted?t:e},buttonColorScheme(){return{borderColor:_.Color.transparent,backgroundColor:U,iconColor:$,textColor:$,hoverColor:z}}},methods:{onButtonClick(){if(this.isMuted){this.getChatService().unmuteChat(this.dialogId);return}this.getChatService().muteChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t:text="buttonText"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const F={components:{ChatButton:b.Button},props:{dialogId:{type:String,required:true}},data(){return{}},computed:{ButtonSize:()=>b.ButtonSize,ButtonColor:()=>b.ButtonColor},methods:{onButtonClick(){this.getChatService().joinChat(this.dialogId)},getChatService(){if(!this.chatService){this.chatService=new B.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__textarea_placeholder">\n\t\t\t<ChatButton\n\t\t\t\t:size="ButtonSize.XL"\n\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t:text="loc('IM_CONTENT_BLOCKED_TEXTAREA_JOIN_CHAT')"\n\t\t\t\t:isRounded="true"\n\t\t\t\t@click="onButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const G={name:"BulkActionsPanel",components:{ChatButton:b.Button,ForwardPopup:E.ForwardPopup},directives:{hint:v.hint},props:{dialogId:{type:String,default:""}},data(){return{showForwardPopup:false,messagesIds:[]}},computed:{ButtonSize:()=>b.ButtonSize,ButtonIcon:()=>b.ButtonIcon,ButtonColor:()=>b.ButtonColor,dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},selectedMessages(){return this.$store.getters["messages/select/getCollection"](this.dialogId)},messagesAuthorId(){return[...this.selectedMessages].map((t=>this.$store.getters["messages/getById"](t).authorId))},hasOthersMessages(){const t=C.Core.getUserId();return this.messagesAuthorId.some((e=>e!==t))},canDeleteMessage(){const t=T.PermissionManager.getInstance();return t.canPerformActionByRole(_.ActionByRole.deleteOthersMessage,this.dialogId)},selectedMessagesSize(){return this.selectedMessages.size},formattedMessagesCounter(){if(!this.selectedMessagesSize){return""}return`(${this.selectedMessagesSize})`},isBlockedDeletion(){if(this.canDeleteMessage){return false}return this.hasOthersMessages},messageCounterText(){if(!this.selectedMessagesSize){return this.loc("IM_CONTENT_BULK_ACTIONS_SELECT_MESSAGES")}return this.loc("IM_CONTENT_BULK_ACTIONS_COUNT_MESSAGES")},confirmTitle(){return this.loc("IM_CONTENT_BULK_ACTIONS_CONFIRM_TITLE",{"#COUNT#":this.selectedMessagesSize})},tooltipSettings(){return{text:this.loc("IM_CONTENT_BULK_ACTIONS_DELETE_NOT_CAN_DELETE"),popupOptions:{angle:true,targetContainer:document.body,offsetTop:-13,offsetLeft:65,bindOptions:{position:"top"}}}}},methods:{onForwardButtonClick(){this.messagesIds=[...this.selectedMessages];this.showForwardPopup=true},closeForwardPopup(){this.messagesIds=[];this.showForwardPopup=false},async onDeleteButtonClick(){const t=await I.showDeleteMessagesConfirm(this.confirmTitle);if(!t){return false}this.getMessageService().deleteMessages([...this.selectedMessages]);this.closeBulkActionsMode();return true},closeBulkActionsMode(){m.EventEmitter.emit(_.EventType.dialog.closeBulkActionsMode,{dialogId:this.dialogId})},getMessageService(){if(!this.messageService){this.messageService=new B.MessageService({chatId:this.dialog.chatId})}return this.messageService},loc(t,e={}){return this.$Bitrix.Loc.getMessage(t,e)}},template:`\n\t\t<div class="bx-im-content-bulk-actions-panel">\n\t\t\t<div class="bx-im-content-bulk-actions-panel__container">\n\t\t\t\t<div class="bx-im-content-bulk-actions-panel__left-section">\n\t\t\t\t\t<div @click="closeBulkActionsMode" class="bx-im-content-bulk-actions-panel__cancel"></div>\n\t\t\t\t\t<div class="bx-im-content-bulk-actions-panel__counter-container">\n\t\t\t\t\t\t<span class="bx-im-content-bulk-actions-panel__counter-name">{{ messageCounterText }}</span>\n\t\t\t\t\t\t<span class="bx-im-content-bulk-actions-panel__counter-number">{{ formattedMessagesCounter }}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="bx-im-content-bulk-actions-panel__right-section">\n\t\t\t\t\t<div class="bx-im-content-bulk-actions-panel__delete-button">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tv-if="isBlockedDeletion"\n\t\t\t\t\t\t\tv-hint="tooltipSettings"\n\t\t\t\t\t\t\tclass="bx-im-content-bulk-actions-panel__tooltip"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ChatButton\n\t\t\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t\t\t:icon="ButtonIcon.Delete"\n\t\t\t\t\t\t\t:color="ButtonColor.Delete"\n\t\t\t\t\t\t\t:isDisabled="!selectedMessagesSize || isBlockedDeletion"\n\t\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t\t\t:text="loc('IM_CONTENT_BULK_ACTIONS_PANEL_DELETE')"\n\t\t\t\t\t\t\t@click="onDeleteButtonClick"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ChatButton\n\t\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t\t:icon="ButtonIcon.Forward"\n\t\t\t\t\t\t:color="ButtonColor.Forward"\n\t\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t\t:isUppercase="false"\n\t\t\t\t\t\t:isDisabled="!selectedMessagesSize"\n\t\t\t\t\t\t:text="loc('IM_CONTENT_BULK_ACTIONS_PANEL_FORWARD')"\n\t\t\t\t\t\t@click="onForwardButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<ForwardPopup\n\t\t\t\t\tv-if="showForwardPopup"\n\t\t\t\t\t:messagesIds="messagesIds"\n\t\t\t\t\t@close="closeForwardPopup"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const K={name:"LoadingBar",data(){return{}},template:`\n\t\t<div class="bx-im-content-chat__loading-bar"></div>\n\t`};const q={mounted(t,e){e.instance.textareaResizeManager.observeTextarea(t)},beforeUnmount(t,e){e.instance.textareaResizeManager.unobserveTextarea(t)}};const j={name:"BaseChatContent",components:{ChatHeader:D,ChatDialog:o.ChatDialog,ChatTextarea:d.ChatTextarea,ChatSidebar:h.ChatSidebar,DropArea:H,MutePanel:X,JoinPanel:F,BulkActionsPanel:G,LoadingBar:K},directives:{"textarea-observer":q},provide(){return{currentSidebarPanel:r.computed((()=>this.currentSidebarPanel)),withSidebar:r.computed((()=>this.withSidebar))}},props:{dialogId:{type:String,default:""},backgroundId:{type:[Number,String,null],default:null},withSidebar:{type:Boolean,default:true},withHeader:{type:Boolean,default:true}},data(){return{textareaHeight:0,showLoadingBar:false,currentSidebarPanel:""}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},canSend(){return T.PermissionManager.getInstance().canPerformActionByRole(_.ActionByRole.send,this.dialog.dialogId)},isGuest(){return this.dialog.role===_.UserRole.guest},isBulkActionsMode(){return this.$store.getters["messages/select/isBulkActionsModeActive"](this.dialogId)},hasCommentsOnTop(){return this.$store.getters["messages/comments/areOpenedForChannel"](this.dialogId)},containerClasses(){const t=this.$store.getters["application/settings/get"](_.Settings.appearance.alignment);return[`--${t}-align`]},backgroundStyle(){if(this.backgroundId){return l.ThemeManager.getBackgroundStyleById(this.backgroundId)}return l.ThemeManager.getCurrentBackgroundStyle()},dialogContainerStyle(){let t=this.textareaHeight;if(!this.canSend||this.isBulkActionsMode){t=R.blockedTextarea}const e=this.withHeader?R.chatHeader:0;return{height:`calc(100% - ${e}px - ${t}px)`}}},watch:{textareaHeight(t,e){if(!this.dialog.inited||e===0){return}m.EventEmitter.emit(_.EventType.dialog.scrollToBottom,{chatId:this.dialog.chatId,animation:false})}},created(){this.initTextareaResizeManager();this.bindEvents();g.BulkActionsManager.init()},beforeUnmount(){this.unbindEvents()},methods:{initTextareaResizeManager(){this.textareaResizeManager=new c.ResizeManager;this.textareaResizeManager.subscribe(c.ResizeManager.events.onHeightChange,this.onTextareaHeightChange)},onTextareaMount(){const t=this.$refs["textarea-container"];this.textareaHeight=t.clientHeight},onTextareaHeightChange(t){const{newHeight:e}=t.getData();this.textareaHeight=e},onShowLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=true},onHideLoadingBar(t){const{dialogId:e}=t.getData();if(e!==this.dialogId){return}this.showLoadingBar=false},onChangeSidebarPanel({panel:t}){this.currentSidebarPanel=t},bindEvents(){m.EventEmitter.subscribe(_.EventType.dialog.showLoadingBar,this.onShowLoadingBar);m.EventEmitter.subscribe(_.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},unbindEvents(){m.EventEmitter.unsubscribe(_.EventType.dialog.showLoadingBar,this.onShowLoadingBar);m.EventEmitter.unsubscribe(_.EventType.dialog.hideLoadingBar,this.onHideLoadingBar)},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-im-content-chat__scope bx-im-content-chat__container" :class="containerClasses" :style="backgroundStyle">\n\t\t\t<div class="bx-im-content-chat__content" ref="content">\n\t\t\t\t<slot v-if="withHeader" name="header">\n\t\t\t\t\t<ChatHeader :dialogId="dialogId" :key="dialogId" />\n\t\t\t\t</slot>\n\t\t\t\t<div :style="dialogContainerStyle" class="bx-im-content-chat__dialog_container">\n\t\t\t\t\t<Transition name="loading-bar-transition">\n\t\t\t\t\t\t<LoadingBar v-if="showLoadingBar" />\n\t\t\t\t\t</Transition>\n\t\t\t\t\t<div class="bx-im-content-chat__dialog_content">\n\t\t\t\t\t\t<slot name="dialog">\n\t\t\t\t\t\t\t<ChatDialog :dialogId="dialogId" :key="dialogId"/>\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\x3c!-- Textarea --\x3e\n\t\t\t\t<Transition name="bx-im-panel-transition">\n\t\t\t\t\t<BulkActionsPanel v-if="isBulkActionsMode" :dialogId="dialogId"/>\n\t\t\t\t\t<div v-else-if="canSend" v-textarea-observer class="bx-im-content-chat__textarea_container" ref="textarea-container">\n\t\t\t\t\t\t<slot name="textarea" :onTextareaMount="onTextareaMount">\n\t\t\t\t\t\t\t<ChatTextarea\n\t\t\t\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t\t\t\t:key="dialogId"\n\t\t\t\t\t\t\t\t:withAudioInput="false"\n\t\t\t\t\t\t\t\t@mounted="onTextareaMount"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t</div>\n\t\t\t\t\t<slot v-else-if="isGuest" name="join-panel">\n\t\t\t\t\t\t<JoinPanel :dialogId="dialogId" />\n\t\t\t\t\t</slot>\n\t\t\t\t\t<MutePanel v-else :dialogId="dialogId" />\n\t\t\t\t</Transition>\n\t\t\t\t<DropArea :dialogId="dialogId" :container="$refs.content || {}" :key="dialogId" />\n\t\t\t\t\x3c!-- End textarea --\x3e\n\t\t\t</div>\n\t\t\t<ChatSidebar\n\t\t\t\tv-if="dialogId && withSidebar" \n\t\t\t\t:originDialogId="dialogId"\n\t\t\t\t:isActive="!hasCommentsOnTop"\n\t\t\t\t@changePanel="onChangeSidebarPanel"\n\t\t\t/>\n\t\t</div>\n\t`};t.ChatHeader=D;t.BaseChatContent=j})(this.BX.Messenger.v2.Component.Content=this.BX.Messenger.v2.Component.Content||{},BX,BX.Call.Component,BX.Messenger.v2.Component.Animation,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Vue3,BX.Messenger.v2.Component.Dialog,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.UI.Uploader,BX,BX.Event,BX.Vue3.Directives,BX.Messenger.v2.Application,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Component.EntitySelector,BX.Messenger.v2.Lib,BX.Messenger.v2.Service);
//# sourceMappingURL=registry.bundle.map.js